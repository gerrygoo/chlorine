{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["\n// a workout is a sequence of distances and multipliers\n// the distances are a multiple of the pool length\ninterface Drill {\n\tinterval: number\n\treps: number\n\n\trest: number\n}\n\ninterface Workout {\n\tdrills: Drill[]\n}\n\ninterface Pool {\n\tlength: number\n\tunit: 'm' | 'y'\n}\n\ninterface Endurance {\n  stamina: number\n}\n\nfunction getDivisors(n: number): number[] {\n\tconst bigDivisors: number[] = []\n\tconst smallDivisors: number[] = []\n\n\tfor(let divisor = 1; divisor <= Math.sqrt(n); divisor++) {\n\t\tif (n % divisor == 0) {\n\t\t\tsmallDivisors.push(divisor)\n\n\t\t\tif (n / divisor != divisor) {\n\t\t\t\tbigDivisors.splice(0, 0, n/divisor)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [...smallDivisors, ...bigDivisors]\n}\n\n// requires a > b and x in [0, 1]\nfunction scaleInto(a: number, b:number, x: number) {\n  return Math.floor(a + ((b - a) * x))\n}\n\nfunction selectUsingScale(candidates: number[], scale: number): number {\n\tconst idx = scaleInto(0, candidates.length - 1, scale)\n\treturn candidates[idx]\n}\n\nfunction makeDrill(poolLength: number, drillLength: number, endurance: number): Drill {\n\t// the lap length is between poolLength and drillLength\n\t// and is a multiple of poolLength\n\t// and evenly divides drillLength\n\tconst possibleIntervals = getDivisors(drillLength)\n\t  .filter(interval => interval >= poolLength &&\n\t\t\t\t\t interval % poolLength == 0)\n\t\n\tconst interval = selectUsingScale(possibleIntervals, endurance)\n\n\treturn {\n\t\tinterval,\n\t\treps: drillLength / interval,\n\t\trest: 0,\n\t}\n}\n\n// TODO: support finishing drills on the other side of the pool\nfunction makeDrillDistances(poolSize: number, maxDistance: number): number[] {\n\tconst distances: number[] = []\n\n\tlet i = 1\n\tlet candidateDistance = poolSize * 2\n\twhile (candidateDistance <= maxDistance) {\n\t\tdistances.push(candidateDistance)\n\t\tcandidateDistance = poolSize * 2 * ++i\n\t}\n\n\treturn distances\n}\n\nfunction makeDrillDistance(poolSize:number, workoutDistance:number, remainingDistance: number, lengthBias:number): number {\n\t// we want the distance to be a function of:\n\t// - the 'stage' of the workout (warmup, main, cooldown)\n\t// - a bias towards length\n\t// [poolSize, remaining]\n\tconst progress = remainingDistance/workoutDistance\n\tconst peripheryDistance = 1 - Math.abs(0.5 - progress) * 2\n\n\tconst possibleDistances = makeDrillDistances(poolSize, remainingDistance)\n\tif (possibleDistances.length === 0) {\n\t\tconsole.log('oops! no drill distances could be generated')\n\t\treturn remainingDistance\n\t}\n\n\t// skew towards smaller options at the beginning\n\t// and towards larger options in the end, because:\n\t// - initially the options are dominated by larger numbers\n\t// - there are few options near the end\n\tconst scale = ((0.5 + 0.5 * lengthBias) + peripheryDistance + (1 - progress))/3\n\treturn selectUsingScale(possibleDistances, scale)\n}\n\nfunction makeWorkout(pool: Pool, workoutDistance: number, endurance: number): Workout {\n\tconst drills: Drill[] = []\n\tlet remainingDistance = workoutDistance\n\n\twhile (remainingDistance > 0) {\n\t\tconst drillDistance = makeDrillDistance(pool.length, workoutDistance, remainingDistance, endurance)\n\n\t\tdrills.push(makeDrill(pool.length, drillDistance, endurance))\n\n\t\tremainingDistance -= drillDistance\n\t}\n\n\treturn { drills }\n}\n\nconst form = document.querySelector('form')\nconst result = document.getElementById('result')\nform.addEventListener('submit', event => {\n\tevent.preventDefault()\n\n\tconst {\n\t\t0: {value: poolLengthStr},\n\t\t1: {value: workoutDistanceStr},\n\t\t2: {value: enduranceStr},\n\t} = event.target\n\n\tconst workout = makeWorkout(\n\t\t\t{\n\t\t\t\tlength: parseInt(poolLengthStr),\n\t\t\t\tunits: 'm'\n      },\n\t\t\tparseInt(workoutDistanceStr),\n\t\t\tparseInt(enduranceStr)/100\n\t\t))\n\n\tresult.textContent = workout.drills\n\t  .map(({ interval, reps }) => `${reps} of ${interval}`)\n\t\t.join(', ')\n})\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}